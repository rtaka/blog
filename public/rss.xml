<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[たかはしメモ]]></title><description><![CDATA[たかはしメモ]]></description><link>https://gatsbyjs.github.io/gatsby-starter-blog/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 03 Jun 2018 05:31:11 GMT</lastBuildDate><item><title><![CDATA[JJUG CCC 2018 Spring]]></title><description><![CDATA[概要 日本 Java ユーザグループ主催のコミュニティカンファレンス 2018/5/26 Sat 10:00 - 18:30 ベルサール新宿グランド コンファレンスセンター 5F Java で Web…]]></description><link>https://gatsbyjs.github.io/gatsby-starter-blog//jjug-ccc-2018-spring/</link><guid isPermaLink="false">https://gatsbyjs.github.io/gatsby-starter-blog//jjug-ccc-2018-spring/</guid><pubDate>Sat, 02 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;日本 Java ユーザグループ主催のコミュニティカンファレンス&lt;/li&gt;
&lt;li&gt;2018/5/26 Sat 10:00 - 18:30&lt;/li&gt;
&lt;li&gt;ベルサール新宿グランド コンファレンスセンター 5F&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java で Web サービスを作り続けるための戦略と戦術&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;開発環境とは、プログラマ以外のデザイナ、サービス側などのエンジニア以外も使う&lt;/li&gt;
&lt;li&gt;開発、検証環境が動かない → 別バージョンのアプリがデプロイされているとか&lt;/li&gt;
&lt;li&gt;開発手順書じゃなくて、セットアップを自動化する&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サービスごとに VM を作って、その上に Docker でアプリ、DB を稼働させる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker For Mac を使わなかった理由&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当時、動作が不安定だったので&lt;/li&gt;
&lt;li&gt;ローカルホストのポートが重複するので&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker の作成、運用はアプリケーションエンジニアの仕事&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maven から Gradleに移行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並列ビルド&lt;/li&gt;
&lt;li&gt;xml はもう古い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jenkins 2 の Jenkinsfile にビルド定義を書く&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プルリクごとに開発/検証環境を用意できることが理想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サービスが側にすぐ確認してもらえるように&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tomcat はインストールして eclipse から起動するのではなく、new Tomcat() する&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JasperReport はオワコン&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 8 だとデザインツールが事実上動かない(2016 年当時)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSESSIONID はオワコン&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数のアプリを起動すると、競合するので&lt;/li&gt;
&lt;li&gt;名前はアプリごとに変更可能&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sticky-session-cookie もオワコン&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spring-session-… でラップすればよい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/main/webapp じゃなく src/main/resources におく&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java 9 Variable Handles のイロハ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Valhalla の由来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valhalla == VALue types に似ているから&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ライブラリ、フレームワーク開発者が主に使う機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 10 から&lt;/li&gt;
&lt;li&gt;sun.misc.Unsafe の代わりに使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sun.misc.Unsafe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK の内部インターフェース API&lt;/li&gt;
&lt;li&gt;直接メモリを操作可能&lt;/li&gt;
&lt;li&gt;Reflection, Serializaion, NIO 等の実装で使用&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sun(Oracle) 以外の利用は想定外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常の開発で使うことはない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variable Handles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データ単位ではなくアクセス単位でメモリ操作可能&lt;/li&gt;
&lt;li&gt;Java 9 まではアトミックな処理で unsafe を使うことがあった&lt;/li&gt;
&lt;li&gt;Java 10 以降は、 Var Handle を使う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MethodHandle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VarHandle の前提知識&lt;/li&gt;
&lt;li&gt;メソッドのポインタ&lt;/li&gt;
&lt;li&gt;関数ポインタ&lt;/li&gt;
&lt;li&gt;Reflection API の代替手段になる(パフォーマンスがよくなる事例がある)&lt;/li&gt;
&lt;li&gt;Field のアクセス、例外 throw、定数を返すとかできる&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;セキュリティチェックが発生しない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;チェックするオーバーヘッドを削減できる&lt;/li&gt;
&lt;li&gt;脆弱性になることがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;volatile → ボラティルって発音してた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;LINE LIVE のチャットが 30,000+/min のコメント投稿をさばけるようになるまで&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WebSocket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LINE LIVE チャットでは送信文字数が少ないので REST API をいちいち呼び出すと思い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;akka Actor Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;actor に大きな処理をさせない(小さく分割することが重要)&lt;/li&gt;
&lt;li&gt;ブロッキングする処理をさせない&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All for One strategy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の子 actor を持っている場合に有用&lt;/li&gt;
&lt;li&gt;各アクター間の依存度が高く、crash したら他のアクターも失敗させることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java から TypeScript へ 切り替えて加速するサーバーレス開発&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AWS Lambda を TypeScript で開発した話&lt;/li&gt;
&lt;li&gt;Lambda を使うとサーバの管理、メンテは不要になるので楽&lt;/li&gt;
&lt;li&gt;ランタイムが Java でコールドスタートした場合、遅いので Node.js にした&lt;/li&gt;
&lt;li&gt;Java 開発者だったら素の JavaScript じゃなくて TypeScript 使うと型の恩恵を受けられていい&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lambda がチェーンしているアーキテクチャがちょっと失敗だったかも&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各 Lambda がコールドスタートになるとかなり遅くなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DDDとクリーンアーキテクチャでサーバーアプリケーションを作っている話&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作ったアプリケーションが密結合、ビジネスロジックを書くドメイン層がなかった&lt;/li&gt;
&lt;li&gt;DDD、クリーンアーキテクチャで作り直している&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;フレームワークは Spring が主流な感じだった&lt;/li&gt;
&lt;li&gt;Docker 使うのはもう当たり前な感じ&lt;/li&gt;
&lt;li&gt;聞いているだけだったけど、最後は疲れちゃってメモが雑に、、、&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スライド&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/chiheisen/20180527/1527375138&quot;&gt;こちら&lt;/a&gt;のブログにいい感じでリンクが貼ってあります&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Java Day Tokyo 2018]]></title><description><![CDATA[概要 日本オラクル主催のカンファレンス 2018/5/17 Thu 9:00 - 18:00 シェラトン都ホテル東京 Java in a World of Containers Java in a World of Containers Security…]]></description><link>https://gatsbyjs.github.io/gatsby-starter-blog//java-day-toko-2018/</link><guid isPermaLink="false">https://gatsbyjs.github.io/gatsby-starter-blog//java-day-toko-2018/</guid><pubDate>Sat, 02 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;日本オラクル主催のカンファレンス&lt;/li&gt;
&lt;li&gt;2018/5/17 Thu 9:00 - 18:00&lt;/li&gt;
&lt;li&gt;シェラトン都ホテル東京&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java in a World of Containers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java in a World of Containers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security が重要&lt;/li&gt;
&lt;li&gt;ハードウェア、コンテナの設定が混在している&lt;/li&gt;
&lt;li&gt;Java は JVM による非依存性が高い&lt;/li&gt;
&lt;li&gt;リッチなエコシステムがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating Docker images&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker run はインスタンス化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating Custom JREs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JRE を全部入りで構成すると 600 MB ぐらいになる&lt;/li&gt;
&lt;li&gt;JDK 9 の Module システムでカスタム JRE を作成できる&lt;/li&gt;
&lt;li&gt;jlink を使える&lt;/li&gt;
&lt;li&gt;JDK 9 , Module 化されていないくても jlink を使える&lt;/li&gt;
&lt;li&gt;必要なモジュール一覧がわからない場合、jdeps を使えばよい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimizing Image Size&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Full JDK 600 MB&lt;/li&gt;
&lt;li&gt;base 46 MB&lt;/li&gt;
&lt;li&gt;netty 60 MB&lt;/li&gt;
&lt;li&gt;ミニマルなサイズ縮小が可能&lt;/li&gt;
&lt;li&gt;静的なアプリの場合、サイズの最適化はあまり重要でない&lt;/li&gt;
&lt;li&gt;Docker ベースイメージの最適化には -slim , alpine linux を使う&lt;/li&gt;
&lt;li&gt;alpine linux musl を使う&lt;/li&gt;
&lt;li&gt;Portola　でベースイメージ 4 MB&lt;/li&gt;
&lt;li&gt;Sharing Across Instances&lt;/li&gt;
&lt;li&gt;OS Shared library&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Class Data Sharing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インスタンス間でのクラス共有で起動時間の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java + Docker features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JVM は C グループ、ネームスペースをみるので実行環境は意識しない&lt;/li&gt;
&lt;li&gt;—cpuset-cpus (JDK 9)&lt;/li&gt;
&lt;li&gt;—cpu-quota (JDK 10)&lt;/li&gt;
&lt;li&gt;Runtime.availableProcessors(), ForkJoin pool, VM internal thread pools で Docker の設定が効く&lt;/li&gt;
&lt;li&gt;Memory settings (JDK 10)&lt;/li&gt;
&lt;li&gt;-m&lt;size&gt;&lt;/li&gt;
&lt;li&gt;java heap size, GC region sizes, etc…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker イメージを JDK フルで作ると 800 MB&lt;/li&gt;
&lt;li&gt;最適化すると 38 MB ぐらいに縮小できる&lt;/li&gt;
&lt;li&gt;Docker のリソース制限が java でも有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java 開発者に贈るコンテナ時代のデプロイメントパイプライン&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンテナで作られたアプリとデプロイメントパイプラインは好相性&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プロダクトに関わる全ての人にパイプラインのメトリクスを共有するべし&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開発者以外もプロダクトの状況を把握してもらえる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;役割の決まっているチームでの導入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;それぞれが使っているツールのことまでは分からない&lt;/li&gt;
&lt;li&gt;お互いのことが分からないと、自己防衛の為に見積もりを過大に評価しがち&lt;/li&gt;
&lt;li&gt;技術的負債の可視化をしていないと、根性で対応&lt;/li&gt;
&lt;li&gt;-&gt; 孤独な開発社になる(サイロ化)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;サイロ化された組織は部分最適化に陥りがち&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;デプロイメントパイプラインを始めるポイント&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バリューストリームマッピングから始める&lt;/li&gt;
&lt;li&gt;プロセスを短く、最適化することを検討&lt;/li&gt;
&lt;li&gt;ステークホルダー、権限がある人を巻き込んで行う&lt;/li&gt;
&lt;li&gt;複雑なまま自動化しない(重要)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;テスト環境へのデプロイまでのリードタイムが長い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;環境構築を開発者で行う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本番環境へのデプロイまでのリードタイムが長い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;息の長い feature ブランチがあるとマージに手間取る -&gt; リードタイムが長くなる&lt;/li&gt;
&lt;li&gt;トランクベースで開発を行うとマージが簡単になるので、リードタイムを縮小できる&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;リリースとデプロイを分離する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブルーグリーンデプロイ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;トランクベース開発の方がプロセスが簡単になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java in Serverless Land&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java は、Serverless 環境での人気は 3 番目&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;企業の規模が大きくなってくると Java shop になる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java は成熟している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;複雑なドメインの問題は fn flow で対応&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コードでワークフローを表現できる&lt;/li&gt;
&lt;li&gt;テスト可能、型安全&lt;/li&gt;
&lt;li&gt;CompletionState API と Fn Flow は似ている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サーバーレス環境(fn project)で JVN を効率的に使用できるのか&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起動が早い、イメージが小さい、環境設定が尊重されること&lt;/li&gt;
&lt;li&gt;メモリ共有(Share memory)で起動が早くなる&lt;/li&gt;
&lt;li&gt;Shared images layers -&gt; Shared memory&lt;/li&gt;
&lt;li&gt;libc libjava.so&lt;/li&gt;
&lt;li&gt;CDS&lt;/li&gt;
&lt;li&gt;起動の初期化処理を事前に行っておく、Class Data Sharing で起動の高速化が可能&lt;/li&gt;
&lt;li&gt;AppCDS&lt;/li&gt;
&lt;li&gt;JDK 10&lt;/li&gt;
&lt;li&gt;たくさんクラスがある場合は、効果がある&lt;/li&gt;
&lt;li&gt;AOT&lt;/li&gt;
&lt;li&gt;OSイメージの最小化&lt;/li&gt;
&lt;li&gt;Project Portola&lt;/li&gt;
&lt;li&gt;JDK&lt;/li&gt;
&lt;li&gt;jlink を使って必要最小限の JDK を作る&lt;/li&gt;
&lt;li&gt;Application code&lt;/li&gt;
&lt;li&gt;最小の依存性で作る&lt;/li&gt;
&lt;li&gt;jlink で整理できる&lt;/li&gt;
&lt;li&gt;JVM&lt;/li&gt;
&lt;li&gt;SubstrateVM 新しい軽量の VM が Oracle Labs から発表された&lt;/li&gt;
&lt;li&gt;JVM エルゴノミクス&lt;/li&gt;
&lt;li&gt;利用可能なリソースからメモリ、CPU の使用量を自動で割り当ててくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java 最新開発ツール事情&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;侍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スレッドダンプの解析ツール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;単体テストで使う DB は Docker 上で MySQL を動かしている&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;コード内で日本語を使うの推進派&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビジネス用語を翻訳せずにそのまま使った方が可読性が上がる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YouTrack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;課題管理ツール&lt;/li&gt;
&lt;li&gt;10 名まで無料&lt;/li&gt;
&lt;li&gt;IntelliJ から作業するチケットの状態を変更できる&lt;/li&gt;
&lt;li&gt;ブランチの作成も可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TeamCity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JetBrains 製 Jenkins&lt;/li&gt;
&lt;li&gt;無料枠あり&lt;/li&gt;
&lt;li&gt;IntelliJ と連携するとビルド、テスト結果を受け取れる&lt;/li&gt;
&lt;li&gt;テスト結果が IDE に通知されるので、素早く修正できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upsource&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コードレビューツール&lt;/li&gt;
&lt;li&gt;10 名まで永年無料&lt;/li&gt;
&lt;li&gt;Github, Bitbuket, Gitlab とも連携可能&lt;/li&gt;
&lt;li&gt;ブラウザ上で参照元をたどれる&lt;/li&gt;
&lt;li&gt;ソースをローカルに pull してくる必要がない&lt;/li&gt;
&lt;li&gt;IntelliJ と連携するとプルリクコメントも IDE 上で確認できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JRebel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クラスの動的リロードツール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JHipster&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雛形生成ツール&lt;/li&gt;
&lt;li&gt;Spring + Angular&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;50 min で最新技術学習の基礎を身につける&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;軸となる用語を一通り一気に学ぶ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パラシュート勉強法で&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;マイクロサービス化の流れから Java EE を Eclipse Foundation に移管された&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オラクルは、Java EE のマイクロサービス化に熱心でない&lt;/li&gt;
&lt;li&gt;関係者に取材して得た情報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;クラウド、マイクロサービス化の話がよく出てきた印象&lt;/li&gt;
&lt;li&gt;基調公演のデモでオラクルの人が Visual Studio Code 使っていてへぇーって感じだった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スライド&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/jp/ondemand/online2018-javaday-4489556-ja.html&quot;&gt;http://www.oracle.com/technetwork/jp/ondemand/online2018-javaday-4489556-ja.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>