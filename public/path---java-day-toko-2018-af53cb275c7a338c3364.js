webpackJsonp([0xc0962c3b0c96],{509:function(l,i){l.exports={data:{site:{siteMetadata:{title:"たかはしメモ",author:"Ryota Takahashi"}},markdownRemark:{id:"/Users/ryota/workspace/blog/src/pages/java-day-toko-2018/index.md absPath of file >>> MarkdownRemark",html:'<h2>概要</h2>\n<ul>\n<li>日本オラクル主催のカンファレンス</li>\n<li>2018/5/17 Thu 9:00 - 18:00</li>\n<li>シェラトン都ホテル東京</li>\n</ul>\n<h2>Java in a World of Containers</h2>\n<ul>\n<li>\n<p>Java in a World of Containers</p>\n<ul>\n<li>Security が重要</li>\n<li>ハードウェア、コンテナの設定が混在している</li>\n<li>Java は JVM による非依存性が高い</li>\n<li>リッチなエコシステムがある</li>\n</ul>\n</li>\n<li>\n<p>Creating Docker images</p>\n<ul>\n<li>docker run はインスタンス化</li>\n</ul>\n</li>\n<li>\n<p>Creating Custom JREs</p>\n<ul>\n<li>JRE を全部入りで構成すると 600 MB ぐらいになる</li>\n<li>JDK 9 の Module システムでカスタム JRE を作成できる</li>\n<li>jlink を使える</li>\n<li>JDK 9 , Module 化されていないくても jlink を使える</li>\n<li>必要なモジュール一覧がわからない場合、jdeps を使えばよい</li>\n</ul>\n</li>\n<li>\n<p>Optimizing Image Size</p>\n<ul>\n<li>Full JDK 600 MB</li>\n<li>base 46 MB</li>\n<li>netty 60 MB</li>\n<li>ミニマルなサイズ縮小が可能</li>\n<li>静的なアプリの場合、サイズの最適化はあまり重要でない</li>\n<li>Docker ベースイメージの最適化には -slim , alpine linux を使う</li>\n<li>alpine linux musl を使う</li>\n<li>Portola　でベースイメージ 4 MB</li>\n<li>Sharing Across Instances</li>\n<li>OS Shared library</li>\n<li>\n<p>Class Data Sharing</p>\n<ul>\n<li>インスタンス間でのクラス共有で起動時間の改善</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Java + Docker features</p>\n<ul>\n<li>JVM は C グループ、ネームスペースをみるので実行環境は意識しない</li>\n<li>—cpuset-cpus (JDK 9)</li>\n<li>—cpu-quota (JDK 10)</li>\n<li>Runtime.availableProcessors(), ForkJoin pool, VM internal thread pools で Docker の設定が効く</li>\n<li>Memory settings (JDK 10)</li>\n<li>-m<size></li>\n<li>java heap size, GC region sizes, etc…</li>\n</ul>\n</li>\n<li>\n<p>Summary</p>\n<ul>\n<li>Docker イメージを JDK フルで作ると 800 MB</li>\n<li>最適化すると 38 MB ぐらいに縮小できる</li>\n<li>Docker のリソース制限が java でも有効になる</li>\n</ul>\n</li>\n</ul>\n<h2>Java 開発者に贈るコンテナ時代のデプロイメントパイプライン</h2>\n<ul>\n<li>コンテナで作られたアプリとデプロイメントパイプラインは好相性</li>\n<li>\n<p>プロダクトに関わる全ての人にパイプラインのメトリクスを共有するべし</p>\n<ul>\n<li>開発者以外もプロダクトの状況を把握してもらえる</li>\n</ul>\n</li>\n<li>\n<p>役割の決まっているチームでの導入</p>\n<ul>\n<li>それぞれが使っているツールのことまでは分からない</li>\n<li>お互いのことが分からないと、自己防衛の為に見積もりを過大に評価しがち</li>\n<li>技術的負債の可視化をしていないと、根性で対応</li>\n<li>-> 孤独な開発社になる(サイロ化)</li>\n</ul>\n</li>\n<li>サイロ化された組織は部分最適化に陥りがち</li>\n<li>\n<p>デプロイメントパイプラインを始めるポイント</p>\n<ul>\n<li>バリューストリームマッピングから始める</li>\n<li>プロセスを短く、最適化することを検討</li>\n<li>ステークホルダー、権限がある人を巻き込んで行う</li>\n<li>複雑なまま自動化しない(重要)</li>\n</ul>\n</li>\n<li>\n<p>テスト環境へのデプロイまでのリードタイムが長い</p>\n<ul>\n<li>環境構築を開発者で行う</li>\n</ul>\n</li>\n<li>\n<p>本番環境へのデプロイまでのリードタイムが長い</p>\n<ul>\n<li>息の長い feature ブランチがあるとマージに手間取る -> リードタイムが長くなる</li>\n<li>トランクベースで開発を行うとマージが簡単になるので、リードタイムを縮小できる</li>\n<li>\n<p>リリースとデプロイを分離する</p>\n<ul>\n<li>ブルーグリーンデプロイ</li>\n</ul>\n</li>\n<li>トランクベース開発の方がプロセスが簡単になる</li>\n</ul>\n</li>\n</ul>\n<h2>Java in Serverless Land</h2>\n<ul>\n<li>Java は、Serverless 環境での人気は 3 番目</li>\n<li>\n<p>企業の規模が大きくなってくると Java shop になる</p>\n<ul>\n<li>Java は成熟している</li>\n</ul>\n</li>\n<li>\n<p>複雑なドメインの問題は fn flow で対応</p>\n<ul>\n<li>コードでワークフローを表現できる</li>\n<li>テスト可能、型安全</li>\n<li>CompletionState API と Fn Flow は似ている</li>\n</ul>\n</li>\n<li>\n<p>サーバーレス環境(fn project)で JVN を効率的に使用できるのか</p>\n<ul>\n<li>起動が早い、イメージが小さい、環境設定が尊重されること</li>\n<li>メモリ共有(Share memory)で起動が早くなる</li>\n<li>Shared images layers -> Shared memory</li>\n<li>libc libjava.so</li>\n<li>CDS</li>\n<li>起動の初期化処理を事前に行っておく、Class Data Sharing で起動の高速化が可能</li>\n<li>AppCDS</li>\n<li>JDK 10</li>\n<li>たくさんクラスがある場合は、効果がある</li>\n<li>AOT</li>\n<li>OSイメージの最小化</li>\n<li>Project Portola</li>\n<li>JDK</li>\n<li>jlink を使って必要最小限の JDK を作る</li>\n<li>Application code</li>\n<li>最小の依存性で作る</li>\n<li>jlink で整理できる</li>\n<li>JVM</li>\n<li>SubstrateVM 新しい軽量の VM が Oracle Labs から発表された</li>\n<li>JVM エルゴノミクス</li>\n<li>利用可能なリソースからメモリ、CPU の使用量を自動で割り当ててくれる</li>\n</ul>\n</li>\n</ul>\n<h2>Java 最新開発ツール事情</h2>\n<ul>\n<li>\n<p>侍</p>\n<ul>\n<li>スレッドダンプの解析ツール</li>\n</ul>\n</li>\n<li>単体テストで使う DB は Docker 上で MySQL を動かしている</li>\n<li>\n<p>コード内で日本語を使うの推進派</p>\n<ul>\n<li>ビジネス用語を翻訳せずにそのまま使った方が可読性が上がる</li>\n</ul>\n</li>\n<li>\n<p>YouTrack</p>\n<ul>\n<li>課題管理ツール</li>\n<li>10 名まで無料</li>\n<li>IntelliJ から作業するチケットの状態を変更できる</li>\n<li>ブランチの作成も可能</li>\n</ul>\n</li>\n<li>\n<p>TeamCity</p>\n<ul>\n<li>JetBrains 製 Jenkins</li>\n<li>無料枠あり</li>\n<li>IntelliJ と連携するとビルド、テスト結果を受け取れる</li>\n<li>テスト結果が IDE に通知されるので、素早く修正できる</li>\n</ul>\n</li>\n<li>\n<p>Upsource</p>\n<ul>\n<li>コードレビューツール</li>\n<li>10 名まで永年無料</li>\n<li>Github, Bitbuket, Gitlab とも連携可能</li>\n<li>ブラウザ上で参照元をたどれる</li>\n<li>ソースをローカルに pull してくる必要がない</li>\n<li>IntelliJ と連携するとプルリクコメントも IDE 上で確認できる</li>\n</ul>\n</li>\n<li>\n<p>JRebel</p>\n<ul>\n<li>クラスの動的リロードツール</li>\n</ul>\n</li>\n<li>\n<p>JHipster</p>\n<ul>\n<li>雛形生成ツール</li>\n<li>Spring + Angular</li>\n</ul>\n</li>\n</ul>\n<h2>50 min で最新技術学習の基礎を身につける</h2>\n<ul>\n<li>\n<p>軸となる用語を一通り一気に学ぶ</p>\n<ul>\n<li>パラシュート勉強法で</li>\n</ul>\n</li>\n<li>\n<p>マイクロサービス化の流れから Java EE を Eclipse Foundation に移管された</p>\n<ul>\n<li>オラクルは、Java EE のマイクロサービス化に熱心でない</li>\n<li>関係者に取材して得た情報</li>\n</ul>\n</li>\n</ul>\n<h2>感想</h2>\n<ul>\n<li>クラウド、マイクロサービス化の話がよく出てきた印象</li>\n<li>基調公演のデモでオラクルの人が Visual Studio Code 使っていてへぇーって感じだった</li>\n</ul>\n<h2>スライド</h2>\n<ul>\n<li><a href="http://www.oracle.com/technetwork/jp/ondemand/online2018-javaday-4489556-ja.html">http://www.oracle.com/technetwork/jp/ondemand/online2018-javaday-4489556-ja.html</a></li>\n</ul>',frontmatter:{title:"Java Day Tokyo 2018",date:"June 02, 2018"}}},pathContext:{slug:"/java-day-toko-2018/",previous:null,next:{fields:{slug:"/jjug-ccc-2018-spring/"},frontmatter:{title:"JJUG CCC 2018 Spring"}}}}}});
//# sourceMappingURL=path---java-day-toko-2018-af53cb275c7a338c3364.js.map